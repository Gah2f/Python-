📜 Origin Story:
Back in the late 1980s, when Guido van Rossum (the creator of Python) was building a new language, he wanted a name that was:

Short

Catchy

A bit mysterious

And fun. 

🖥️ Hey terminal, what’s \n and \t?
Terminal replies:

"\n? Oh, that's me hitting the Enter key — I drop the cursor to a new line."

"\t? That’s like pressing the Tab key — I push the text forward with a little indentation."


🧭 What is enum?
In Python, enum (short for enumeration) is a class that lets you define named constant values. Instead of using magic numbers or strings all over your code, you can give meaningful names to those values.

You get it from the enum module:

python
Copy code
from enum import Enum
📦 Example:
python
Copy code
from enum import Enum

class Color(Enum):
    RED = 1
    GREEN = 2
    BLUE = 3

print(Color.RED)        # Output: Color.RED
print(Color.RED.value)  # Output: 1
print(Color.RED.name)   # Output: 'RED'
🛠️ Why use enum?
Prevents typos (Color.RED vs "red")

Makes code cleaner and more readable

Allows comparisons: if color == Color.GREEN:

Groups related constants together

🧠 Think of it like this:
Hey terminal analogy:
It's like giving variable names to button IDs on a controller:
Instead of using 1, 2, 3, you define:

python
Copy code
class Button(Enum):
    JUMP = 1
    SHOOT = 2
    RUN = 3
So your code becomes:

python
Copy code
if input == Button.JUMP:
    player.jump()
Clean. Clear. No guesswork.



🧱 List vs Tuple in Python

🧠 Hey terminal analogy:
Think of a list like a toolbox with adjustable slots – you can add or remove tools anytime.
A tuple is like a sealed toolkit – fixed once packed, for efficiency and safety.

🔧 When to use what?
Use lists when you need to change, sort, or update the contents.

Use tuples when you want to protect data and use them as dictionary keys or in sets.

🧮 List Indexing in Python
- - - fruits = ['apple', 'banana', 'cherry', 'mango']

📦 Basic Indexing
print(fruits[0]) #apple

🔄 Negative Indexing
print(fruits[-1])  # 'mango'

🎯 Slicing 
print(fruits[1:3])     # ['banana', 'cherry']

More Methods: 
 - - - > 🔧 .append() — Add one item to the end
 fruits = ['apple', 'banana']
fruits.append('cherry')
print(fruits)  # ['apple', 'banana', 'cherry']

 - - - > .extend() — Add multiple items
 fruits = ['apple']
fruits.extend(['banana', 'cherry'])
print(fruits)  # ['apple', 'banana', 'cherry']

**** append vs extend ****:

append(['banana', 'cherry']) → adds a list as one element

extend(['banana', 'cherry']) → adds each item separately 

- - - > .insert(index, item) — Add at a specific position 
fruits = ['apple', 'cherry']
fruits.insert(1, 'banana')... the parameters are like this "Hey in this postion insert this"
print(fruits)  # ['apple', 'banana', 'cherry']

- - - > .remove(item) — Removes the first match
fruits = ['apple', 'banana', 'apple']
fruits.remove('apple')
print(fruits)  # ['banana', 'apple']

- - - > .pop(index=-1) — Removes and returns item (last by default)
fruits = ['apple', 'banana']
last = fruits.pop()
print(last)    # 'banana'
print(fruits)  # ['apple']

- - - > .sort() and .reverse()
nums = [3, 1, 2]
nums.sort()
print(nums)     # [1, 2, 3]

nums.reverse()
print(nums)     # [3, 2, 1]

OR if you Want to sort in reverse directly? Use:
    nums.sort(reverse=True)

🧳 Tuple Packing : Packing means putting multiple values into a single tuple container
                    person = ('Nebiyu', 21, 'Ethiopia')

📤 Tuple Unpacking : Unpacking is the reverse — you take values out of a tuple and assign them to variables
name, age, country = person
print(name)     # 'Nebiyu'
print(age)      # 21
print(country)  # 'Ethiopia'

Unpacking with *:

 a, *b = (1, 2, 3, 4)
print(a)  # 1
print(b)  # [2, 3, 4] 

OR 

*a, b = (1, 2, 3, 4)
print(a)  # [1, 2, 3]
print(b)  # 4


