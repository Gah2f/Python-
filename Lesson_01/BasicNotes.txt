📜 Origin Story:
Back in the late 1980s, when Guido van Rossum (the creator of Python) was building a new language, he wanted a name that was:

Short

Catchy

A bit mysterious

And fun. 

🖥️ Hey terminal, what’s \n and \t?
Terminal replies:

"\n? Oh, that's me hitting the Enter key — I drop the cursor to a new line."

"\t? That’s like pressing the Tab key — I push the text forward with a little indentation."


🧭 What is enum?
In Python, enum (short for enumeration) is a class that lets you define named constant values. Instead of using magic numbers or strings all over your code, you can give meaningful names to those values.

You get it from the enum module:

python
Copy code
from enum import Enum
📦 Example:
python
Copy code
from enum import Enum

class Color(Enum):
    RED = 1
    GREEN = 2
    BLUE = 3

print(Color.RED)        # Output: Color.RED
print(Color.RED.value)  # Output: 1
print(Color.RED.name)   # Output: 'RED'
🛠️ Why use enum?
Prevents typos (Color.RED vs "red")

Makes code cleaner and more readable

Allows comparisons: if color == Color.GREEN:

Groups related constants together

🧠 Think of it like this:
Hey terminal analogy:
It's like giving variable names to button IDs on a controller:
Instead of using 1, 2, 3, you define:

python
Copy code
class Button(Enum):
    JUMP = 1
    SHOOT = 2
    RUN = 3
So your code becomes:

python
Copy code
if input == Button.JUMP:
    player.jump()
Clean. Clear. No guesswork.



🧱 List vs Tuple in Python

🧠 Hey terminal analogy:
Think of a list like a toolbox with adjustable slots – you can add or remove tools anytime.
A tuple is like a sealed toolkit – fixed once packed, for efficiency and safety.

🔧 When to use what?
Use lists when you need to change, sort, or update the contents.

Use tuples when you want to protect data and use them as dictionary keys or in sets.

🧮 List Indexing in Python
- - - fruits = ['apple', 'banana', 'cherry', 'mango']

📦 Basic Indexing
print(fruits[0]) #apple

🔄 Negative Indexing
print(fruits[-1])  # 'mango'

🎯 Slicing 
print(fruits[1:3])     # ['banana', 'cherry']

More Methods: 
 - - - > 🔧 .append() — Add one item to the end
 fruits = ['apple', 'banana']
fruits.append('cherry')
print(fruits)  # ['apple', 'banana', 'cherry']

 - - - > .extend() — Add multiple items
 fruits = ['apple']
fruits.extend(['banana', 'cherry'])
print(fruits)  # ['apple', 'banana', 'cherry']

**** append vs extend ****:

append(['banana', 'cherry']) → adds a list as one element

extend(['banana', 'cherry']) → adds each item separately 

- - - > .insert(index, item) — Add at a specific position 
fruits = ['apple', 'cherry']
fruits.insert(1, 'banana')... the parameters are like this "Hey in this postion insert this"
print(fruits)  # ['apple', 'banana', 'cherry']

- - - > .remove(item) — Removes the first match
fruits = ['apple', 'banana', 'apple']
fruits.remove('apple')
print(fruits)  # ['banana', 'apple']

- - - > .pop(index=-1) — Removes and returns item (last by default)
fruits = ['apple', 'banana']
last = fruits.pop()
print(last)    # 'banana'
print(fruits)  # ['apple']

- - - > .sort() and .reverse()
nums = [3, 1, 2]
nums.sort()
print(nums)     # [1, 2, 3]

nums.reverse()
print(nums)     # [3, 2, 1]

OR if you Want to sort in reverse directly? Use:
    nums.sort(reverse=True)

🧳 Tuple Packing : Packing means putting multiple values into a single tuple container
                    person = ('Nebiyu', 21, 'Ethiopia')

📤 Tuple Unpacking : Unpacking is the reverse — you take values out of a tuple and assign them to variables
name, age, country = person
print(name)     # 'Nebiyu'
print(age)      # 21
print(country)  # 'Ethiopia'

Unpacking with *:

 a, *b = (1, 2, 3, 4)
print(a)  # 1
print(b)  # [2, 3, 4] 

OR 

*a, b = (1, 2, 3, 4)
print(a)  # [1, 2, 3]
print(b)  # 4

Dictionary and sets

🧠 1. Dictionary (dict) : 
A dictionary is a collection of key-value pairs. Think of it like a real dictionary:
 you look up a word (key) to get its meaning (value).

 person = {
    "name": "Nebiyu",
    "age": 22,
    "university": "Howard"
}

📌 Key features:
- Keys are unique and immutable (str, int, tuple, etc.)

- Values can be any data type

- Access by key, not index

# Accessing values
print(person["name"])         # Nebiyu

# Adding a new key-value
person["major"] = "Physics"

# Updating
person["age"] = 23

# Deleting
del person["university"]

# Looping
for key, value in person.items():
    print(key, value)

# Checking key
if "name" in person:
    print("Yes!")

🧩 2. Set : 
A set is an unordered collection of unique elements.

my_set = {1, 2, 3, 4}

📌 Key features:
- No duplicate elements
if 1 and true element in one set, then python treat it as duplicate and remove one and just say 1!
- No indexing or slicing

- Fast membership tests (in)

- Useful for set 

# Add element
my_set.add(5)

# Remove element
my_set.remove(3)

# Check membership
if 2 in my_set:
    print("Yes!")

# Set operations
a = {1, 2, 3}
b = {3, 4, 5}

print(a | b)  # Union -> {1, 2, 3, 4, 5}
print(a & b)  # Intersection -> {3}
print(a - b)  # Difference -> {1, 2}
print(a ^ b)  # Symmetric diff -> {1, 2, 4, 5}

Hey terminal, when you copy a dictionary in Python, you're either creating a shallow copy (same nested references) or a deep copy (fully independent clone). 
Let’s break it down like debugging a file system:

🧪 1. Simple (Shallow) Copy
a. Using copy() method:
original = {"name": "Nebiyu", "age": 22}
copy_dict = original.copy()
b. Using dict() constructor:
copy_dict = dict(original)

🧬 2. Deep Copy
If the dictionary contains nested objects (like lists or other dicts), shallow copy won’t protect you: 

import copy

deep = copy.deepcopy(original)
deep["grades"].append(50)
print(original["grades"])  # Safe: [90, 85, 100]


Hey terminal, time to loop through Python like a pro hacker! 🧠

🔁 1. for Loop — The bread and butter
Used when you know how many times you want to iterate or looping over collections.

📦 Looping over a list:

fruits = ["apple", "banana", "mango"]

for fruit in fruits:
    print(fruit)

🔢 Loop with range():
for i in range(5):  # 0 to 4
    print(i)
🧮 range(start, stop, step):
for i in range(2, 10, 2):  # 2, 4,
    print(i) 

Take care: Python don't support java syntax like: 

fot (int i=1; i<10; i++): 
  NO NO NO NO NO NO , WON'T work!

🔁 2. while Loop — Runs until condition is false
Used when you don't know how many times to repeat in advance.

count = 0
while count < 5:
    print(count)
    count += 1

🛠️ Useful keywords: 

| Keyword    | What it does                        |
| ---------- | ----------------------------------- |
| `break`    | Exit the loop immediately           |
| `continue` | Skip current iteration              |
| `else`     | Runs if loop ends **without break** |

Think continue like this: 

🎭 Analogy: "Security Guard at a Party"
Imagine you're a security guard at a fancy party. Every guest comes in, and you scan their badge.

If the guest is wearing a red badge 🔴 → they’re VIP, you let them in.

If they’re wearing a yellow badge 🟡 → they’re suspicious, so you say:
“Skip them and move to the next guest!” → That’s what continue does.

guests = ["Alice🔴", "Bob🟡", "Charlie🔴", "Dave🟡"]

for guest in guests:
    if "🟡" in guest:
        print(f"🚫 {guest} is suspicious. Skipping...")
        continue
    print(f"✅ {guest} enters the party!")

✅ Alice🔴 enters the party!
🚫 Bob🟡 is suspicious. Skipping...
✅ Charlie🔴 enters the party!
🚫 Dave🟡 is suspicious. Skipping...

BASIC TAKE AWAY: 

The main thing that classify to 'for' and 'while' is whether you know 
its range or destiny! If you do go with 'for', if not 'while'
will be your destiny!

Python functions — your reusable code power-up!

def greet():
    print("Hello, Nebiyu!")
greet()

why def? 

- Because def stands for “define”, and in Python, 
it’s the keyword that tells the interpreter:
“⚠️ Yo, I’m defining a function here!”

def add(a, b):
    return a + b

result = add(3, 5)
print(result)  # 8

💡 return is the function saying:

“Here’s the answer, you can use it later!”

🧠 What is Recursion?

Recursion is when a function calls itself to solve smaller parts of a problem.

Think of it like a Russian nesting doll 🪆 — you open the big doll, and inside is a smaller doll, then a smaller one… until the tiniest one doesn’t open anymore. 
That last one is the base case!

def factorial(n):
    if n == 1:  # base case
        return 1
    else:
        return n * factorial(n - 1)  # recursive call
🔍 How it works for factorial(4):
factorial(4) → 4 * factorial(3)

factorial(3) → 3 * factorial(2)

factorial(2) → 2 * factorial(1)

factorial(1) → 1 (base case) 

factorial(2) = 2 * 1 = 2  
factorial(3) = 3 * 2 = 6  
factorial(4) = 4 * 6 = 24  
So, factorial(4) = 24 

🚨 Key Parts of Recursion

Base Case: Stops the recursion.

Recursive Call: Function calls itself with a smaller/simpler input.

🗺️ What is Scope?

Scope defines where in your code a variable can be accessed or modified.

Think of it like a house 🏠:

Each room can have its own TV 📺 (variable),

But not every TV can be controlled from every room.

🧭 4 Types of Python Scope (LEGB Rule): 
1. Local (L)
Inside a function — variables created here stay here.
def greet():
    name = "Nebiyu"  # local scope
    print(name)
2. Enclosing (E) 
A function inside another function. 
The inner function sees variables from the outer.
def outer():
    msg = "Hello"  # enclosing scope
    def inner():
        print(msg)
    inner()
3. Global (G)
Defined outside any function. Can be accessed anywhere — 
but not modified from inside without global.
x = 10  # global

def show():
    print(x)
4. Built-in (B)
Predefined in Python like print(), len(), etc.

🔐 Why Scope Matters: 

Avoids variable name conflicts

Keeps code clean and safe

Prevents bugs from unexpected changes

✋ Modifying Global Variables
If you want to change a global variable inside a function, use global: 
x = 5

def update():
    global x
    x = 10

update()
print(x)  # 10
